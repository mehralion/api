<?php
/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 02.06.2016
 */

namespace app\controller;

use app\component\VarDumper;
use app\helper\FileHelper;
use app\model\Clan;
use app\model\ClanWarNew;
use app\model\Effect;
use app\model\Inventory;
use app\model\RuinesItems;
use app\model\RuinesMap;
use app\model\User;
use app\model\UserAbils;
use app\model\UserComplect;
use Illuminate\Database\Capsule\Manager as Capsule;
use Illuminate\Database\Query\Expression;

class ApiController extends BaseController
{
	private $_cache_time = 10;
	private $_cache = true;

	public function beforeAction($action)
	{
		header("Access-Control-Allow-Credentials: true");
		header("Access-Control-Allow-Origin: http://capitalcity.oldbk.com");

		try {
			if($this->app->webUser->getId() == 102904) {
				$message = sprintf('%s. %s', (new \DateTime())->format('d.m.Y H:i:s'), $action).PHP_EOL;
				FileHelper::write2($message, '102904_timer');
			}
		} catch (\Exception $ex) {

		}

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	public function testAction()
	{
		try {
			$User = User::find(546433);
		} catch (\Exception $ex) {
			VarDumper::d($ex);
		}

	}

	public function playerAction()
	{
		$response = array();
		$hash = null;
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}
			$user_id = $this->app->webUser->getId();

			/** @var User $User */
			$User = User::find($user_id);
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_player_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}

			}

			$data = array(
				'date' => time(),
				'player' => array(
					'id'                => (int)$User['id'],
					'align'				=> $User['align'],
					'login'             => $User['login'],
					'level'             => (int)$User['level'],
					'clan'              => $User['klan'],
					'clanstatus'        => $User['status'],
					'hp'                => (int)$User['hp'],
					'hpfull'            => (int)$User['maxhp'],
					'mp'                => (int)$User['mana'],
					'mpfull'            => (int)$User['maxmana'],
					'exp'               => (int)$User['exp'],
					'expup'             => (int)$User['nextup'],
					'battle_id'         => (int)$User['battle'],
					'war'               => 0,
					'inventorysets'     => array(),
					'playerbuffs'       => array(),
					'playerabils'   	=> array(),
					'gamepaidstatus'    => array(
						'type' => 'none',
						'date' => 0
					),
					'clientpaidstatus'  => array(
						'type' => 'standart',
						'date' => 0
					),
					'slots' 			=> array(
						'sergi'		=> $User['sergi'] > 0 ? $User['sergi'] : false,
						'kulon'		=> $User['kulon'] > 0 ? $User['kulon'] : false,
						'perchi' 	=> $User['perchi'] > 0 ? $User['perchi'] : false,
						'weapon'	=> $User['weap'] > 0 ? $User['weap'] : false,
						'armor'		=> $User['bron'] > 0 ? $User['bron'] : false,
						'helm'		=> $User['helm'] > 0 ? $User['helm'] : false,
						'shit'		=> $User['shit'] > 0 ? $User['shit'] : false,
						'boots'		=> $User['boots'] > 0 ? $User['boots'] : false,
						'r1'		=> $User['r1'] > 0 ? $User['r1'] : false,
						'r2'		=> $User['r2'] > 0 ? $User['r2'] : false,
						'r3'		=> $User['r3'] > 0 ? $User['r3'] : false,
					),
					'stats'				=> array(
						'sila' 	=> $User['sila'],
						'lovk' 	=> $User['lovk'],
						'inta' 	=> $User['inta'],
						'vinos' => $User['vinos'],
						'intel' => $User['intel'],
						'mudra' => $User['mudra'],
					),
					'inventory' 		=> [
						'use' 	=> number_format($User->getUseMassa(), 2, '.', ''),
						'have' 	=> number_format($User->getMassa(), 2, '.', ''),
					]
				),
			);

			//get clan war
			if($User['klan']) {
				/** @var Clan $Clan */
				$Clan = Clan::where('short', '=', $User['klan'])->first(['id']);
				if($Clan) {
					$ClanWar = ClanWarNew::whereRaw('agressor = ? or defender = ?', [$Clan['id'], $Clan['id']])->first(['id']);
					if($ClanWar) {
						$data['player']['war'] = (int)$ClanWar['id'];
					}
				}
			}

			//get complect
			$Complect = UserComplect::whereRaw('owner = ?', [$User['id']])->get(['id','name']);
			foreach ($Complect as $_item) {
				$data['player']['inventorysets'][] = array(
					'id'    => (int)$_item['id'],
					'name'  => $_item['name']
				);
			}

			//get baffs
			$Effects = Effect::whereRaw('owner = ? and type not in (4999, 5999, 6999) and name != ""', [$User['id']])->get(['name','time','type']);
			foreach ($Effects as $Effect) {
				$data['player']['playerbuffs'][] = array(
					'name'  => $Effect['name'],
					'date'  => (int)$Effect['time'],
					'id'	=> $Effect['type'],
				);
			}

			//get abils
			$Abils = UserAbils::whereRaw('owner = ?', [$User['id']])->get(['magic_id','allcount','findata','daily','dailyc']);
			foreach ($Abils as $Abil) {
				$temp = array(
					'magic_id'  => (int)$Abil['magic_id'],
					'count'  	=> (int)$Abil['allcount'],
					'expire'	=> $Abil['findata'],
					'daily'		=> false,
				);
				if($Abil['daily']) {
					$temp['daily'] = array(
						'count' => $Abil['daily'],
						'have'	=> $Abil['dailyc'],
					);
				}

				$data['player']['playerabils'][] = $temp;
			}

			//account
			$Account = Effect::whereRaw('type in (4999, 5999, 6999) and owner = ?', [$User['id']])->first(['type', 'time']);
			if($Account) {
				$name = 'silver';
				if($Account['type'] == 5999) {
					$name = 'gold';
				} elseif($Account['type'] == 6999) {
					$name = 'platinum';
				}
				$data['player']['gamepaidstatus']['type'] = $name;
				$data['player']['gamepaidstatus']['date'] = (int)$Account['time'];
			}

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_player_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => $ex->getMessage(),
			);
			FileHelper::writeException($ex, 'api');
		}

		if(isset($user_id) && $user_id == 546433) {
			$memory_string = sprintf('Pic: %sMB. Current: %sMB', memory_get_peak_usage(true)/1024/1024, memory_get_usage(true)/1024/1024);
			FileHelper::write($memory_string, 'memory_player');
		}
		$this->renderJSON($response);
	}

	public function questAction()
	{
		$response = array();
		$data = array();
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}

			$user_id = $this->app->webUser->getId();
			$User = User::find($user_id)->toArray();
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_quest_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}
			}

			/*$Quest = $this->app->quest
				->setUser($User)
				->get();
			foreach($Quest->getDescriptionsInfo() as $_quest) {
				$data[] = array(
					'name' 			=> $_quest[1],
					'description' 	=> $_quest[2]
				);
			}*/

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_quest_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => 'We have some problem, try later',
			);
			FileHelper::writeException($ex, 'api');
		}

		$this->renderJSON($response);
	}

	public function inventoryAction()
	{
		$response = array();
		$hash = null;
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}
			$user_id = $this->app->webUser->getId();

			$User = User::find($user_id)->toArray();
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_inventory_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}
			}

			$data = array(
				'date' => time(),
				'items' => array(),
			);


			$_where = [
				'i.owner = :owner',
				'i.setsale = 0', //не в продаже
				'i.type not in (77, 200)',
				'i.otdel != 62',
				'(i.prototype not between 3000 and 3030)',
				'(i.prototype not between 103000 and 103030)',
				'(i.prototype not between 3003000 and 3003100)',
				'(i.prototype not between 3003200 and 3003400)',
				'(i.prototype not between 1009999 and 1020001)',
				'(i.prototype not between 15550 and 15569)'
			];
			$sql = sprintf('select i.id, i.name, i.letter, i.dressed, i.goden, i.dategoden, i.duration, i.maxdur, i.massa, i.includemagic, i.includemagicname, i.includemagicdex, i.includemagicmax, i.includemagicuses from inventory i where %s', implode(' and ', $_where));
			$pdo = Capsule::connection()->getPdo();
			$stmt = $pdo->prepare($sql);
			$stmt->execute([':owner' => $User['id']]);
			while ($_item = $stmt->fetch(\PDO::FETCH_ASSOC)) {
				$temp = array(
					'id'            => (int)$_item['id'],
					'name'          => $_item['name'],
					'description'   => $_item['letter'],
					'magic'         => array(),
					'is_dressed'    => $_item['dressed'],
					'expire'        => $_item['goden'] > 0 ? $_item['dategoden'] : 0,
					'duration'      => array(
						'current'   => $_item['duration'],
						'max'       => $_item['maxdur'],
					),
					'mass'			=> $_item['massa'],
				);
				if($_item['includemagic']) {
					$temp['magic'] = array(
						'name'      => $_item['includemagicname'],
						'magic'     => $_item['includemagic'],
						'have_use'  => $_item['includemagicdex'],
						'max_use'   => $_item['includemagicmax'],
						'recharge'  => $_item['includemagicuses'],
					);
				}

				$data['items'][] = $temp;

				unset($temp);
				unset($_item);
			}

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_inventory_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => 'We have some problem, try later',
			);

			FileHelper::writeException($ex, 'api');
		}

		if(isset($user_id) && $user_id == 546433) {
			$memory_string = sprintf('Pic: %sMB. Current: %sMB', memory_get_peak_usage(true)/1024/1024, memory_get_usage(true)/1024/1024);
			FileHelper::write($memory_string, 'memory_inventory');
		}

		$this->renderJSON($response);
	}

	public function ruineAction()
	{
		$response = array();
		$hash = null;
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}
			$user_id = $this->app->webUser->getId();


			$User = User::find($user_id)->toArray();
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_ruine_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}
			}

			$data = array(
				'date'      => time(),
				'id'        => $User['ruines'] ? $User['ruines'] : 0,
				'team'      => $User['id_grup'] ? 'red' : 'blue',
				'players'   => array(),
				'traps'     => array(),
			);
			$player_ids = array();
			if($User['ruines']) {
				$Map = RuinesMap::find($User['ruines'])->toArray();

				$UserList = User::whereRaw('ruines = ? and id_grup = ?', [$User['ruines'], $User['id_grup']])->get()->toArray();
				foreach ($UserList as $_user) {
					$frozen = -1;
					/** @var Effect $EffectPuti */
					$EffectPuti = Effect::whereRaw('name = "Путы" and type = 10 and owner = ?', [$_user['id']])->first();
					if($EffectPuti) {
						$EffectPuti = $EffectPuti->toArray();
						$frozen = ($EffectPuti['time'] - time()) / 60;
					}

					$Inventory = Inventory::whereRaw('owner = ? and bs_owner = 2', [$_user['id']])->get()->toArray();
					$items = array();
					foreach ($Inventory  as $_inventory) {
						$items[] = array(
							'title' => $_inventory['name'],
							'img'   => $_inventory['img'],
							'type'  => str_replace('.gif', '', $_inventory['img']),
						);
					}

					$room = $_user['room'] - $Map['rooms'];

					$player = array(
						'id'                => (int)$_user['id'],
						'login'             => $_user['login'],
						'level'             => (int)$_user['level'],
						'align'             => $_user['align'],
						'clan'              => $_user['klan'],
						'hp'                => (int)$_user['hp'],
						'hpfull'            => (int)$_user['maxhp'],
						'ruineslocation'    => $this->app->ruine[$room][0],
						'battle'            => (int)$_user['battle'],
						'frozen'            => $frozen,
						'items'             => $items,
					);

					$data['players'][] = $player;
					$player_ids[] = (int)$_user['id'];
				}

				/** @var RuinesItems[] $Items */
				$Items = RuinesItems::whereIn('extra', $player_ids)
					->whereRaw('type = 1 and name = "Ловушка"')
					->get()->toArray();
				foreach ($Items as $_item) {
					$room = $_item['room'] - $Map['rooms'];
					$data['traps'][] = $this->app->ruine[$room][0];
				}
			}

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_ruine_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => 'We have some problem, try later',
			);
			FileHelper::writeException($ex, 'api');
		}

		$this->renderJSON($response);
	}

}