<?php
/**
 * Created by PhpStorm.
 * User: nnikitchenko
 * Date: 02.06.2016
 */

namespace app\controller;

use app\component\VarDumper;
use app\helper\FileHelper;
use app\model\Clan;
use app\model\ClanWarNew;
use app\model\Effect;
use app\model\Inventory;
use app\model\RuinesItems;
use app\model\RuinesMap;
use app\model\User;
use app\model\UserAbils;
use app\model\UserComplect;
use Illuminate\Database\Capsule\Manager as Capsule;
use Illuminate\Database\Query\Expression;

class ApiController extends BaseController
{
	private $_cache_time = 10;
	private $_cache = true;

	public function beforeAction($action)
	{
		header("Access-Control-Allow-Credentials: true");
		header("Access-Control-Allow-Origin: http://capitalcity.oldbk.com");

		return parent::beforeAction($action); // TODO: Change the autogenerated stub
	}

	public function timeAction()
	{
		try {
			if ($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}

			$response = [
				'status' => 1,
				'time' => time(),
			];
		} catch (\Exception $ex) {
			$response = [
				'status'    => 0,
				'message'   => $ex->getMessage(),
			];
			FileHelper::writeException($ex, 'api');
		}

		$this->renderJSON($response);
	}

	public function playerAction()
	{
		$response = array();
		$hash = null;
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}
			$user_id = $this->app->webUser->getId();

			/** @var User $User */
			$User = User::find($user_id);
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_player_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}

			}

			$data = array(
				'date' => time(),
				'player' => array(
					'id'                => (int)$User['id'],
					'align'				=> $User['align'],
					'login'             => $User['login'],
					'level'             => (int)$User['level'],
					'clan'              => $User['klan'],
					'clanstatus'        => $User['status'],
					'hp'                => (int)$User['hp'],
					'hpfull'            => (int)$User['maxhp'],
					'mp'                => (int)$User['mana'],
					'mpfull'            => (int)$User['maxmana'],
					'exp'               => (int)$User['exp'],
					'expup'             => (int)$User['nextup'],
					'battle_id'         => (int)$User['battle'],
					'war'               => 0,
					'inventorysets'     => array(),
					'playerbuffs'       => array(),
					'playerabils'   	=> array(),
					'gamepaidstatus'    => array(
						'type' => 'none',
						'date' => 0
					),
					'clientpaidstatus'  => array(
						'type' => 'standart',
						'date' => 0
					),
					'slots' 			=> array(
						'sergi'		=> $User['sergi'] > 0 ? $User['sergi'] : false,
						'kulon'		=> $User['kulon'] > 0 ? $User['kulon'] : false,
						'perchi' 	=> $User['perchi'] > 0 ? $User['perchi'] : false,
						'weapon'	=> $User['weap'] > 0 ? $User['weap'] : false,
						'armor'		=> $User['bron'] > 0 ? $User['bron'] : false,
						'helm'		=> $User['helm'] > 0 ? $User['helm'] : false,
						'shit'		=> $User['shit'] > 0 ? $User['shit'] : false,
						'boots'		=> $User['boots'] > 0 ? $User['boots'] : false,
						'r1'		=> $User['r1'] > 0 ? $User['r1'] : false,
						'r2'		=> $User['r2'] > 0 ? $User['r2'] : false,
						'r3'		=> $User['r3'] > 0 ? $User['r3'] : false,
					),
					'stats'				=> array(
						'sila' 	=> $User['sila'],
						'lovk' 	=> $User['lovk'],
						'inta' 	=> $User['inta'],
						'vinos' => $User['vinos'],
						'intel' => $User['intel'],
						'mudra' => $User['mudra'],
					),
					'inventory' 		=> [
						'use' 	=> number_format($User->getUseMassa(), 2, '.', ''),
						'have' 	=> number_format($User->getMassa(), 2, '.', ''),
					]
				),
			);

			//get clan war
			if($User['klan']) {
				/** @var Clan $Clan */
				$Clan = Clan::where('short', '=', $User['klan'])->first(['id']);
				if($Clan) {
					$ClanWar = ClanWarNew::whereRaw('agressor = ? or defender = ?', [$Clan['id'], $Clan['id']])->first(['id']);
					if($ClanWar) {
						$data['player']['war'] = (int)$ClanWar['id'];
					}
				}
			}

			//get complect
			$Complect = UserComplect::whereRaw('owner = ?', [$User['id']])->get(['id','name']);
			foreach ($Complect as $_item) {
				$data['player']['inventorysets'][] = array(
					'id'    => (int)$_item['id'],
					'name'  => $_item['name']
				);
			}

			//get baffs
			$Effects = Effect::whereRaw('owner = ? and type not in (4999, 5999, 6999) and name != ""', [$User['id']])->get(['name','time','type']);
			foreach ($Effects as $Effect) {
				$data['player']['playerbuffs'][] = array(
					'name'  => $Effect['name'],
					'date'  => (int)$Effect['time'],
					'id'	=> $Effect['type'],
				);
			}

			//get abils
			$Abils = UserAbils::whereRaw('owner = ?', [$User['id']])->get(['magic_id','allcount','findata','daily','dailyc']);
			foreach ($Abils as $Abil) {
				$temp = array(
					'magic_id'  => (int)$Abil['magic_id'],
					'count'  	=> (int)$Abil['allcount'],
					'expire'	=> $Abil['findata'],
					'daily'		=> false,
				);
				if($Abil['daily']) {
					$temp['daily'] = array(
						'count' => $Abil['daily'],
						'have'	=> $Abil['dailyc'],
					);
				}

				$data['player']['playerabils'][] = $temp;
			}

			//account
			$Account = Effect::whereRaw('type in (4999, 5999, 6999) and owner = ?', [$User['id']])->first(['type', 'time']);
			if($Account) {
				$name = 'silver';
				if($Account['type'] == 5999) {
					$name = 'gold';
				} elseif($Account['type'] == 6999) {
					$name = 'platinum';
				}
				$data['player']['gamepaidstatus']['type'] = $name;
				$data['player']['gamepaidstatus']['date'] = (int)$Account['time'];
			}

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_player_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => $ex->getMessage(),
			);
			FileHelper::writeException($ex, 'api');
		}

		if(isset($user_id) && $user_id == 546433) {
			$memory_string = sprintf('Pic: %sMB. Current: %sMB', memory_get_peak_usage(true)/1024/1024, memory_get_usage(true)/1024/1024);
			FileHelper::write($memory_string, 'memory_player');
		}
		$this->renderJSON($response);
	}

	public function questAction()
	{
		$response = array();
		$data = array();
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}

			$user_id = $this->app->webUser->getId();
			$User = User::find($user_id)->toArray();
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_quest_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}
			}

			/*$Quest = $this->app->quest
				->setUser($User)
				->get();
			foreach($Quest->getDescriptionsInfo() as $_quest) {
				$data[] = array(
					'name' 			=> $_quest[1],
					'description' 	=> $_quest[2]
				);
			}*/

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_quest_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => 'We have some problem, try later',
			);
			FileHelper::writeException($ex, 'api');
		}

		$this->renderJSON($response);
	}

	public function inventoryAction()
	{
		$response = array();
		$hash = null;
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}
			$user_id = $this->app->webUser->getId();

			$User = User::find($user_id)->toArray();
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_inventory_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}
			}

			$data = array(
				'date' => time(),
				'items' => array(),
			);


			$_where = [
				'i.owner = :owner',
				'i.setsale = 0', //не в продаже
				'i.type not in (77, 200)',
				'i.otdel != 62',
				'(i.prototype not between 3000 and 3030)',
				'(i.prototype not between 103000 and 103030)',
				'(i.prototype not between 3003000 and 3003100)',
				'(i.prototype not between 3003200 and 3003400)',
				'(i.prototype not between 1009999 and 1020001)',
				'(i.prototype not between 15550 and 15569)'
			];
			$sql = sprintf('select i.id, i.name, i.letter, i.dressed, i.goden, i.dategoden, i.duration, i.maxdur, i.massa, i.includemagic, i.includemagicname, i.includemagicdex, i.includemagicmax, i.includemagicuses from inventory i USE INDEX (owner,type,prototype) where %s', implode(' and ', $_where));
			$pdo = Capsule::connection()->getPdo();
			$stmt = $pdo->prepare($sql);
			$stmt->execute([':owner' => $User['id']]);
			$_items = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			foreach ($_items as $_item) {
				$temp = array(
					'id'            => (int)$_item['id'],
					'name'          => $_item['name'],
					'description'   => $_item['letter'],
					'magic'         => array(),
					'is_dressed'    => $_item['dressed'],
					'expire'        => $_item['goden'] > 0 ? $_item['dategoden'] : 0,
					'duration'      => array(
						'current'   => $_item['duration'],
						'max'       => $_item['maxdur'],
					),
					'mass'			=> $_item['massa'],
				);
				if($_item['includemagic']) {
					$temp['magic'] = array(
						'name'      => $_item['includemagicname'],
						'magic'     => $_item['includemagic'],
						'have_use'  => $_item['includemagicdex'],
						'max_use'   => $_item['includemagicmax'],
						'recharge'  => $_item['includemagicuses'],
					);
				}

				$data['items'][] = $temp;

				unset($temp);
				unset($_item);
			}

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_inventory_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => 'We have some problem, try later',
			);

			FileHelper::writeException($ex, 'api');
		}

		if(isset($user_id) && $user_id == 546433) {
			$memory_string = sprintf('Pic: %sMB. Current: %sMB', memory_get_peak_usage(true)/1024/1024, memory_get_usage(true)/1024/1024);
			FileHelper::write($memory_string, 'memory_inventory');
		}

		$this->renderJSON($response);
	}


	public function inventory2Action()
	{
		$response = array();
		$hash = null;
		try {
			$user_id = 7937;

			$User = User::find($user_id)->toArray();
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				/*$response = $this->app->cache->get('api_user_inventory_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}*/
			}

			$data = array(
				'date' => time(),
				'items' => array(),
			);


			$_where = [
				'i.owner = :owner',
				'i.setsale = 0', //не в продаже
				'i.type not in (77, 200)',
				'i.otdel != 62',
				'(i.prototype not between 3000 and 3030)',
				'(i.prototype not between 103000 and 103030)',
				'(i.prototype not between 3003000 and 3003100)',
				'(i.prototype not between 3003200 and 3003400)',
				'(i.prototype not between 1009999 and 1020001)',
				'(i.prototype not between 15550 and 15569)'
			];
			$sql = sprintf('select i.id, i.name, i.letter, i.dressed, i.goden, i.dategoden, i.duration, i.maxdur, i.massa, i.includemagic, i.includemagicname, i.includemagicdex, i.includemagicmax, i.includemagicuses from inventory i USE INDEX (owner,type,prototype) where %s', implode(' and ', $_where));
			$pdo = Capsule::connection()->getPdo();
			$stmt = $pdo->prepare($sql);
			$stmt->execute([':owner' => $User['id']]);
			$_items = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			foreach ($_items as $_item) {
				$temp = array(
					'id'            => (int)$_item['id'],
					'name'          => $_item['name'],
					'description'   => $_item['letter'],
					'magic'         => array(),
					'is_dressed'    => $_item['dressed'],
					'expire'        => $_item['goden'] > 0 ? $_item['dategoden'] : 0,
					'duration'      => array(
						'current'   => $_item['duration'],
						'max'       => $_item['maxdur'],
					),
					'mass'			=> $_item['massa'],
				);
				if($_item['includemagic']) {
					$temp['magic'] = array(
						'name'      => $_item['includemagicname'],
						'magic'     => $_item['includemagic'],
						'have_use'  => $_item['includemagicdex'],
						'max_use'   => $_item['includemagicmax'],
						'recharge'  => $_item['includemagicuses'],
					);
				}

				$data['items'][] = $temp;

				unset($temp);
				unset($_item);
			}

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_inventory_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => 'We have some problem, try later',
			);

			FileHelper::writeException($ex, 'api');
		}

		$memory_string = sprintf('Pic: %sMB. Current: %sMB', memory_get_peak_usage(true)/1024/1024, memory_get_usage(true)/1024/1024);
		var_dump($memory_string);die;

		$this->renderJSON($response);
	}

	public function ruineAction()
	{
		$response = array();
		$hash = null;
		try {
			if($this->app->webUser->isGuest()) {
				throw new \Exception('User not found');
			}
			$user_id = $this->app->webUser->getId();


			$User = User::find($user_id)->toArray();
			if(!$User) {
				throw new \Exception('Invalid USER');
			}

			if($this->_cache) {
				$response = $this->app->cache->get('api_user_ruine_'.$user_id);
				if($response) {
					$response['cache'] = true;
					$this->renderJSON($response);
				}
			}

			$data = array(
				'date'      => time(),
				'id'        => $User['ruines'] ? $User['ruines'] : 0,
				'team'      => $User['id_grup'] ? 'red' : 'blue',
				'players'   => array(),
				'traps'     => array(),
			);
			$player_ids = array();
			if($User['ruines']) {
				$Map = RuinesMap::find($User['ruines'])->toArray();

				$UserList = User::whereRaw('ruines = ? and id_grup = ?', [$User['ruines'], $User['id_grup']])->get()->toArray();
				foreach ($UserList as $_user) {
					$frozen = -1;
					/** @var Effect $EffectPuti */
					$EffectPuti = Effect::whereRaw('name = "Путы" and type = 10 and owner = ?', [$_user['id']])->first();
					if($EffectPuti) {
						$EffectPuti = $EffectPuti->toArray();
						$frozen = ($EffectPuti['time'] - time()) / 60;
					}

					$Inventory = Inventory::whereRaw('owner = ? and bs_owner = 2', [$_user['id']])->get()->toArray();
					$items = array();
					foreach ($Inventory  as $_inventory) {
						$items[] = array(
							'title' => $_inventory['name'],
							'img'   => $_inventory['img'],
							'type'  => str_replace('.gif', '', $_inventory['img']),
						);
					}

					$room = $_user['room'] - $Map['rooms'];

					$player = array(
						'id'                => (int)$_user['id'],
						'login'             => $_user['login'],
						'level'             => (int)$_user['level'],
						'align'             => $_user['align'],
						'clan'              => $_user['klan'],
						'hp'                => (int)$_user['hp'],
						'hpfull'            => (int)$_user['maxhp'],
						'ruineslocation'    => $this->app->ruine[$room][0],
						'battle'            => (int)$_user['battle'],
						'frozen'            => $frozen,
						'items'             => $items,
					);

					$data['players'][] = $player;
					$player_ids[] = (int)$_user['id'];
				}

				/** @var RuinesItems[] $Items */
				$Items = RuinesItems::whereIn('extra', $player_ids)
					->whereRaw('type = 1 and name = "Ловушка"')
					->get()->toArray();
				foreach ($Items as $_item) {
					$room = $_item['room'] - $Map['rooms'];
					$data['traps'][] = $this->app->ruine[$room][0];
				}
			}

			$response = array(
				'status'   => 1,
				'success' => true,
				//'crypt'     => $hash,
				'response'  => $data
			);

			if($this->_cache) {
				$this->app->cache->set('api_user_ruine_'.$user_id, $response, $this->_cache_time);
			}

		} catch (\Exception $ex) {
			$response = array(
				'status'     => 0,
				'error' => true,
				//'crypt'     => $hash,
				'message'   => 'We have some problem, try later',
			);
			FileHelper::writeException($ex, 'api');
		}

		$this->renderJSON($response);
	}

	private $_rooms = [
		"Секретная Комната",
		"Комната для новичков",
		"Комната для новичков 2",
		"Комната для новичков 3",
		"Комната для новичков 4",
		"Зал Воинов 1",
		"Зал Воинов 2",
		"Зал Воинов 3",
		"Торговый зал",
		"Рыцарский зал",
		"Башня рыцарей-магов",
		"Колдовской мир",
		"Этажи духов",
		"Астральные этажи",
		"Огненный мир",
		"Зал Паладинов",
		"Совет Белого Братства",
		"Зал Тьмы",
		"Царство Тьмы",
		"Будуар",
		"Центральная площадь",
		"Страшилкина улица",
		"Магазин",
		"Ремонтная мастерская",
		"Новогодняя елка",
		"Комиссионный магазин",
		"Парковая улица",
		"Почта",
		"Регистратура кланов",
		"Банк",
		"Суд",
		"Башня смерти",
		"Готический замок",
		"Лабиринт хаоса",
		"Цветочный магазин",
		"Магазин 'Березка'",
		"Зал Стихий",
		"Готический замок - приемная",
		"Готический замок - арсенал",
		"Готический замок - внутренний двор",
		"Готический замок - мастерские",
		"Готический замок - комнаты отдыха","
		Лотерея Сталкеров","Комната Знахаря",
		"Комната №44",
		"Вход в Лабиринт Хаоса",
		"Прокатная лавка",
		"Арендная лавка",
		"Храмовая лавка",
		"Храм Короля Артура",
		"Замковая площадь",
		"Большая скамейка",
		"Средняя скамейка",
		"Маленькая скамейка",
		"Зал Света",
		"Царство Света",
		"Царство Стихий",
		"Зал клановых войн",
		"Комната №58",
		"Комната №59",
		"Арена Богов",
		"Комната №61",
		"Комната №62",
		"Комната №63",
		"Комната №64",
		"Комната №65",
		"66" => 'Торговая улица',
		"200" => "Ристалище",
		"401" => "Врата Ада",

		//Ломбард
		"70" => "Ломбард",
		"71" => "Аукцион",
		"72" => "Ярмарка",
		"75" => "Кабинет",
		"76" => "Бои классов",

		//
		"80" => "Помойка",
		"90" => "Замок Лорда Разрушителя",
		"91" => "Кузница", // с 91 и по 97 забрал на крафты и 191 на улицу мастеров
		"92" => "Таверна",
		"93" => "Лаборатория магов и алхимиков",
		"94" => "Мастерская ювелиров и портных",
		"95" => "Мастерская плотника",
		"96" => "Башня оружейников",
		"191" => "Улица Мастеров",

		//турниры
		"197"=>"Оружейная Комната",
		"198"=>"Оружейная Комната",
		"199"=>"Оружейная Комната",

		"270"=>"Вход в Одиночные сражения",
		"271"=> "Одиночные сражения[1]",
		"272"=> "Одиночные сражения[2]",
		"273"=> "Одиночные сражения[3]",
		"274"=> "Одиночные сражения[4]",
		"275"=> "Одиночные сражения[5]",
		"276"=> "Одиночные сражения[6]",
		"277"=> "Одиночные сражения[7]",
		"278"=> "Одиночные сражения[8]",
		"279"=> "Одиночные сражения[9]",
		"280"=> "Одиночные сражения[10]",
		"281"=> "Одиночные сражения[11]",
		"282"=> "Одиночные сражения[12]",

		// Групповое сражение
		"240"=>"Вход в Групповые сражения",
		"241"=> "Групповое сражение[1]",
		"242"=> "Групповое сражение[2]",
		"243"=> "Групповое сражение[3]",
		"244"=> "Групповое сражение[4]",
		"245"=> "Групповое сражение[5]",
		"246"=> "Групповое сражение[6]",
		"247"=> "Групповое сражение[7]",
		"248"=> "Групповое сражение[8]",
		"249"=> "Групповое сражение[9]",
		"250"=> "Групповое сражение[10]",
		"251"=> "Групповое сражение[11]",
		"252"=> "Групповое сражение[12]",
		"253"=> "Групповое сражение[13]",

		//Сражение отрядов
		"210"=>"Вход в Сражения отрядов",
		"211"=> "Сражение отрядов[1]",
		"212"=> "Сражение отрядов[2]",
		"213"=> "Сражение отрядов[3]",
		"214"=> "Сражение отрядов[4]",
		"215"=> "Сражение отрядов[5]",
		"216"=> "Сражение отрядов[6]",
		"217"=> "Сражение отрядов[7]",
		"218"=> "Сражение отрядов[8]",
		"219"=> "Сражение отрядов[9]",
		"220"=> "Сражение отрядов[10]",
		"221"=> "Сражение отрядов[11]",
		"222"=> "Сражение отрядов[12]",
		"223"=> "Сражение отрядов[13]",

		//Бои с пойманными монстрами
		"300" => "Бои с пойманными монстрами",

		// БС
		"501" => "Восточная Крыша",
		"502" => "Бойница",
		"503" => "Келья 3",
		"504" => "Келья 2",
		"505" => "Западная Крыша 2",
		"506" => "Келья 4",
		"507" => "Келья 1",
		"508" => "Служебная комната",
		"509" => "Зал Отдыха 2",
		"510" => "Западная Крыша 1",
		"511" => "Выход на Крышу",
		"512" => "Зал Статуй 2",
		"513" => "Храм",
		"514" => "Восточная комната",
		"515" => "Зал Отдыха 1",
		"516" => "Старый Зал 2",
		"517" => "Старый Зал 1",
		"518" => "Красный Зал 3",
		"519" => "Зал Статуй 1",
		"520" => "Зал Статуй 3",
		"521" => "Трапезная 3",
		"522" => "Зал Ожиданий",
		"523" => "Оружейная",
		"524" => "Красный Зал-Окна",
		"525" => "Красный Зал",
		"526" => "Гостинная",
		"527" => "Трапезная 1",
		"528" => "Внутренний Двор",
		"529" => "Внутр.Двор-Вход",
		"530" => "Желтый Коридор",
		"531" => "Мраморный Зал 1",
		"532" => "Красный Зал 2",
		"533" => "Библиотека 1",
		"534" => "Трапезная 2",
		"535" => "Проход Внутр. Двора",
		"536" => "Комната с Камином",
		"537" => "Библиотека 3",
		"538" => "Выход из Мрам.Зала",
		"539" => "Красный Зал-Коридор",
		"540" => "Лестница в Подвал 1",
		"541" => "Южный Внутр. Двор",
		"542" => "Трапезная 4",
		"543" => "Мраморный Зал 3",
		"544" => "Мраморный Зал 2",
		"545" => "Картинная Галерея 1",
		"546" => "Лестница в Подвал 2",
		"547" => "Проход Внутр. Двора 2",
		"548" => "Внутр.Двор-Выход",
		"549" => "Библиотека 2",
		"550" => "Картинная Галерея 3",
		"551" => "Картинная Галерея 2",
		"552" => "Лестница в Подвал 3",
		"553" => "Терасса",
		"554" => "Оранжерея",
		"555" => "Зал Ораторов",
		"556" => "Лестница в Подвал 4",
		"557" => "Темная Комната",
		"558" => "Винный Погреб",
		"559" => "Комната в Подвале",
		"560" => "Подвал" ,
		"600" => "Темница",

		"10000" => "Башня смерти",
		"999" => "Вход в Руины",
		"61000" => "Вокзал",
		"72001" => "Замковые турниры",
	];

	public function infoAction()
	{
		$hidden = [
			'str' 		=> '??',
			'agil' 		=> '??',
			'int' 		=> '??',
			'dex' 		=> '??',
			'intel' 	=> '??',
			'wisd' 		=> '??',
			'spir' 		=> '??',
			'godn' 		=> '??',
			'hp' 		=> '??',
			'maxhp' 	=> '??',
			'mana' 		=> '??',
			'maxmana' 	=> '??',
			'travma' 	=> '??',
			'items' 	=> [],
		];

		$user_id = $this->app->request->get('uid');
		$response = [
			'status' => 1,
		];

		$this->_cache = false;
		if($this->_cache) {
			$response = $this->app->cache->get('api_user_info_'.$user_id);
			if($response) {
				$response['cache'] = true;
				$this->renderJSON($response);
			}
		}

		try {
			/** @var User $User */
			$User = User::find($user_id);
			if(!$User) {
				throw new \Exception('User not found');
			}
			$isOnline = (int)(time()-$User->odate < 60*5);

			$response['data'] = [
				'id' 			=> $User->id,
				'login' 		=> $User->login,
				'level' 		=> $User->level,
				'align' 		=> $User->align,
				'klan' 			=> $User->klan,
				'sex' 			=> $User->sex,
				'str' 			=> $User->sila,
				'agil' 			=> $User->lovk,
				'int' 			=> $User->inta,
				'dex' 			=> $User->vinos,
				'intel' 		=> $User->intel,
				'wisd' 			=> $User->mudra,
				'spir' 			=> $User->duh,
				'godn' 			=> $User->bojes,
				'status' 		=> $User->status,
				'borncity' 		=> $User->borncity,
				'block' 		=> $User->block,
				'palmessage' 	=> $User->palcom,
				'online'		=> 0,
				'loc'			=> 'Где-то за просторами',
				'hp'			=> $isOnline && $User->hidden == 0 ? $User->hp : $User->maxhp,
				'maxhp'			=> $User->maxhp,
				'mana'			=> $isOnline && $User->hidden == 0 ? $User->mana : $User->maxmana,
				'maxmana'		=> $User->maxmana,
				'travma'		=> 0,
				'items'			=> [],
			];

			//травма персонажа
			$Effect = Effect::whereRaw('`type` >= 11 and `type` <= 14 and owner = ?', [$User->id])
				->orderBy('type', 'desc')
				->first();
			if($Effect) {
				$response['data']['travma'] = $Effect->type;
			}

			//Предметы на персонаже
			$_where = [
				'i.owner = :owner',
				'i.dressed = 1',
				'i.type != 12',
			];
			$sql = sprintf('select i.name, i.duration, i.maxdur from inventory i where %s', implode(' and ', $_where));
			$pdo = Capsule::connection()->getPdo();
			$stmt = $pdo->prepare($sql);
			$stmt->execute([':owner' => $User->id]);
			$_items = $stmt->fetchAll(\PDO::FETCH_ASSOC);
			foreach ($_items as $_item) {
				$response['data']['items'][] = sprintf('%s %d/%d', $_item['name'], $_item['duration'], $_item['maxdur']);
			}

			if($User->hidden == 0 && $isOnline) {
				$location = 'Где-то на просторах';
				switch (true) {
					case ($User->room >= 49998 && $User->room <= 60000):
						$location = 'Где-то в загороде';
						break;
					case ($User->lab > 0):
						$location = 'Где-то в лабиринте';
						break;
					case (isset($this->_rooms[$User->room])):
						$location = $this->_rooms[$User->room];
						break;
				}

				$response['data'] = array_merge($response['data'], [
					'online' => $isOnline,
					'loc' => $isOnline ? $location : 'Где-то за просторами',
				]);
			}

			//скрываем важную инфу только если перс в локациях и без скрытости (невед\воплот)
			if($User->in_tower > 0 && $User->hidden == 0) {
				$response['data'] = array_merge($response['data'], $hidden);
			}


			if($this->_cache) {
				$this->app->cache->set('api_user_info_'.$user_id, $response, $this->_cache_time);
			}
		} catch (\Exception $ex) {
			$response = [
				'status' 	=> 0,
				'message'   => 'We have some problem, try later',
			];
			FileHelper::writeException($ex, 'api_info');
		}

		$this->renderJSON($response);
	}

}